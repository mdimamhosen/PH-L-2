generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(PATIENT)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  Doctor             Doctor?
  Patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [email], references: [email])
  DoctorSpecialties   DoctorSpecialties[]
  DoctorScheule       DoctorScheule[]

  @@map("doctors")
}

enum UserRole {
  SUPER_ADMIN
  DOCTOR
  PATIENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(references: [email], fields: [email])
  PatientHealthData PatientHealthData?
  MedicalReport     MedicalReport[]

  @@map("patients")
}

model Specialties {
  id                String              @id @default(uuid())
  title             String
  description       String?
  icon              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  DoctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  doctorId       String
  specialitiesId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  specialties Specialties @relation(fields: [specialitiesId], references: [id])

  @@id([doctorId, specialitiesId])
  @@map("doctor_specialties")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("madical_reports")
}

model Schedule {
  id            String          @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  DoctorScheule DoctorScheule[]

  @@map("schedules")
}

model DoctorScheule {
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  seheduleId  String
  schedule    Schedule @relation(fields: [seheduleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  isBooked    Boolean  @default(false)
  isAvailable Boolean  @default(true)

  @@id([doctorId, seheduleId])
  @@map("doctor_schedules")
}
